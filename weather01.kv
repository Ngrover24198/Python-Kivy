#: import weather01 weather01
#: import ListAdapter kivy.adapters.listadapter.ListAdapter
#the leftmost class is our root class

WeatherRoot:   # definition that weatherroot is the root class 

<WeatherRoot>: # this is the root class
   # AddLocationForm:  # this is the definition of the subclass
    carousel: carousel
    locations: locations
    current_weather: current_weather
    forecast: forecast
    BoxLayout:
        orientation: "vertical"
        ActionBar:
            ActionView:
                use_seperator: True
                ActionPrevious:
                    title: "kivy weather"
                    with_previous: False
                ActionOverflow:
                    ActionButton:
                        text: "Add Location"
                        on_press: app.root.show_add_location_form()
                    ActionButton:
						text: "Settings"
						on_press: app.open_settings()
				ActionButton:
					text: "Locations"
					on_press: app.root.carousel.load_slide(app.root.locations)
				ActionButton:
					text: "Current"
					on_press: app.root.carousel.load_slide(app.root.current_weather)
				ActionButton:
					text: "Forecast"
					on_press: app.root.carousel.load_slide(app.root.forecast)
        Carousel:
            id: carousel
            Locations:
                id: locations
            CurrentWeather:
                id: current_weather
            Forecast:
                id: forecast

<AddLocationForm>:  # seperately defined the function in order to get it's access easily
    search_input: search_box
    search_results: search_results_list
    BoxLayout:
        orientation: "vertical"
        BoxLayout:
            height: "40dp"
            size_hint_y: None
            TextInput:
                id: search_box
                size_hint_x: 50
                focus: True
                multiline: False
                on_text_validate: root.search_location() #it will use enter button as well to submit
            Button:
                text: "Search"
                size_hint_x: 25
                on_press: root.search_location() 
            Button:
                text: "Current Location"
                size_hint_x: 25
        ListView:
            id: search_results_list
            adapter:
                ListAdapter(data=[], cls = weather01.LocationButton, args_converter = weather01.locations_args_converter)
            item_strings: []
        Button: 
            height: "40dp"
            size_hint_y: None
            text: "Cancel"
            on_press: root.dismiss()

<Locations@BoxLayout>:
    orientation: "vertical"
    locations_list: locations_list
    ListView:
        id: locations_list
        adapter:
            ListAdapter(data=[], cls = weather01.LocationButton, args_converter = weather01.locations_args_converter)
               
    #BoxLayout:
     #   orientation: "horizontal"
      #  size_hint_y: None
       # height: "40dp"
        #Button: 
        #    text: "Add Location"
        #    on_press: app.root.show_add_location_form()

<ForecastLabel@BoxLayout>:
    date: ""
    conditions_image: ""
    conditions: ""
    temp_min: None
    temp_max: None
    canvas.before:
        Color:
            rgb: [0.2,0.2,0.2]
        Line:
            points: [self.pos[0],self.pos[1],self.width,self.pos[1]]
    Label:
        text: root.date
    BoxLayout:
        orientation: "vertical"
        AsyncImage: 
            source: root.conditions_image
        Label:
            text: root.conditions
        BoxLayout:
            orientation: "vertical"
            Label: 
                text: "Low: {}".format(root.temp_min)
            Label:
                text: "High: {}".format(root.temp_max)
    
<Forecast>:
    forecast_container: forecast_container
    orientation: "vertical"
    Label:
        size_hint_y: 0.1
        font_size: "30dp"
        text: "{} ({})".format(root.location[0],root.location[1])
    BoxLayout:
        orientation: "vertical"
        id: forecast_container
   # BoxLayout:
   #     orientation: "horizontal"
   #     size_hint_y: None
   #     height: "40dp"
   #     Button:
   #         text: "Current"
   #         on_press: app.root.show_current_weather(root.location)



<CurrentWeather>:
    orientation: "vertical"
    BoxLayout:
        orientation: "horizontal"
        Label:
            text: "{} ({})".format(root.location[0], root.location[1]) # this is the currentweather location difeined in .kv file
            font_size: "30dp"
        Label:
            text: "Current: {}".format(root.temp)
            font_size: "30dp"
    BoxLayout:
        orientation: "horizontal"
        Label:
            text: root.conditions
        #font_size: "30dp"
        AsyncImage:
            source: root.conditions_image

    BoxLayout:
        orientation: "horizontal"
        Label:
            text: "Low: {}".format(root.temp_min)
           # font_size: "20dp"
        Label:
            text: "High: {}".format(root.temp_max)
            #font_size: "20dp"
  #  BoxLayout:
  #      orientation: "horizontal"
  #      height: "40dp"
  #      Button: 
  #          text: "Add Location"
  #          size_hint_x: 50
  #          on_press: app.root.show_add_location_form()
  #      Button:
  #          size_hint_x: 50
  #          text: "Forecast" 

<LocationButton>: # this is just the calling for the subclass directly from python file

    text: "{} ({})".format(self.location[0],self.location[1]) # this is the dictionary key
    height: "40dp"
    size_hint_y: None
    on_press: app.root.show_current_weather(self.location) # this is tuple of city,country
    
